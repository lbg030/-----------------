#2001개에 대하여 모든 경우의수를 계산해 놔야함.
#점화식을 찾지 못하면 못푼다고 함

#모든 경우의 수
# 0 ~ 10 까지의 경우의 수
dp = [[0]*2001 for i in range(11)]

#m이 뭐든지간에 n이 0이면 0개의 수로 로또를 맞추는 거기 때문에 무조건 한개의 경우의 수 그래서 dp[0]은 1로 맞춤
dp[0] = [1]*2001

#점화식
for i in range(1, 11):
    for j in range(1, 2001):
        dp[i][j] = dp[i][j-1]+dp[i-1][j//2]

T = int(input())
for _ in range(T):
    n, m = map(int, input().split())
    print(dp[n][m])

# print(dp[4][:11])

#먼저, dp[i][j]에는 j 이하의 i개 수를 만드는 방법 개수를 저장한다. 
# 점화식은 dp[i][j]를 계산한다고 할 때, j-1 이하의 i개 수를 만드는 방법(j를 사용하지 않고 i개 수를 만드는 방법)+ j//2 이하의 i-1개 수를 만드는 방법(j를 사용하여 i개 수를 만드는 방법)을 사용한다. 
# 예를들어 10 이하 4개 수로 로또번호를 만든다고 할 때,
#  9 이하의 4개 수를 만드는 방법(1 2 4 8, 1 2 4 9)과
#  5 이하의 3개를 만드는 경우(1 2 4 (10), 1 2 5 (10))를 더하여 
#  4개로 계산된다.